AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31

Description: Concert API example application


Globals:
  Api:
    OpenApiVersion: 3.0.3


Parameters:
  env:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - test
      - prod
    Description: Deployment environment, e.g. dev for development


Conditions:
  IsEnvProd: !Equals 
    - !Ref env
    - prod


Resources:
  # Reference https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-dynamodb-table.html
  ConcertsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      TableName: !Sub 'concerts-${env}'
      AttributeDefinitions:
        - AttributeName: artist
          AttributeType: S
        - AttributeName: concert
          AttributeType: S
      KeySchema:
        - AttributeName: artist
          KeyType: HASH
        - AttributeName: concert
          KeyType: RANGE
      Tags:
        - Key: Application
          Value: Concerts
        - Key: Environment
          Value: !Ref env

  # Reference https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html
  ApiHandlerFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.lambda_handler
      Runtime: python3.9
      CodeUri: './lambda/concerts_api_handler/src'
      Layers:
        - !Sub 'arn:aws:lambda:${AWS::Region}:017000801446:layer:AWSLambdaPowertoolsPython:39'
      Tracing: Active
      Timeout: 120
      Architectures:
        - arm64
      Environment:
        Variables: 
          TABLE_NAME: !Ref ConcertsTable
          LOG_LEVEL: !If [IsEnvProd, "WARNING", "INFO"]
          POWERTOOLS_LOGGER_LOG_EVENT: !If [IsEnvProd, false, true]
          POWERTOOLS_SERVICE_NAME: concerts_api_handler
          POWERTOOLS_LOGGER_SAMPLE_RATE: 0.1

      Policies:
        - AWSLambdaExecute
        - Version: '2012-10-17' 
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:PutItem
              Resource: !GetAtt ConcertsTable.Arn

  # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-api.html
  ConcertsApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      StageName: !Ref env
      DefinitionBody:
        'Fn::Transform':
          Name: 'AWS::Include'
          Parameters:
            Location: './api/concerts.yaml'
      Tags:
        Application: Concerts
        Environment: !Ref env

  LambdaInvocationPermission:
    Type: AWS::Lambda::Permission
    Properties: 
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt ApiHandlerFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ConcertsApi}/*/*/*"

Outputs:
  ConcertsApiUrl:
    Description: The URL of the concerts API
    Value: !Sub 'https://${ConcertsApi}.execute-api.${AWS::Region}.amazonaws.com/${env}'
